{"version":3,"sources":["components/CodeInput/styles.js","components/CodeInput/index.js","styles.js","App.js","index.js"],"names":["Container","styled","div","Input","input","CodeInput","props","useState","values","setValues","slots","parseInt","slotRefs","useRef","Array","fill","map","slot","createRef","i","ref","current","type","step","maxLength","pattern","value","onChange","e","cleanValue","match","join","prev","newValues","onValueChange","valid","length","focus","select","setValue","target","defaultProps","MainContainer","App","handleValueChange","code","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wqBAEO,IAAMA,EAAYC,IAAOC,IAAV,KAOTC,EAAQF,IAAOG,MAAV,KCLZC,EAAY,SAACC,GAAW,IAAD,EACGC,mBAAS,IADZ,mBAClBC,EADkB,KACVC,EADU,KAEnBC,EAAQC,SAASL,EAAMI,MAAO,IAAM,EAAIC,SAASL,EAAMI,MAAO,IAAM,EAEpEE,EAAWC,iBAAOC,MAAMJ,GAAOK,KAAK,GAAGC,KAAI,SAAAC,GAAI,OAAIC,0BA2BzD,OACI,kBAAClB,EAAD,KACKc,MAAMJ,GAAOK,KAAK,GAAGC,KAAI,SAACC,EAAME,GAAP,OACtB,kBAAChB,EAAD,CAAOiB,IAAKR,EAASS,QAAQF,GAAIG,KAAK,OAAOC,KAAK,IAAIC,UAAW,EAAGC,QAAO,UAAKnB,EAAMmB,SAAWC,MAAOlB,EAAOW,IAAM,GAAIQ,SAAU,SAACC,GAAD,OA5B9H,SAACT,EAAGO,GAEjB,IAAMG,GAAcH,EAAMI,MAAMxB,EAAMmB,UAAY,IAAIM,KAAK,IAE3DtB,GAAU,SAACuB,GACP,IAAMC,EAAS,YAAOD,GAMtB,OALAC,EAAUd,GAAKU,EACfvB,EAAM4B,cAAc,CAChBR,MAAOO,EAAUF,KAAK,IACtBI,MAAOF,EAAUF,KAAK,IAAIK,SAAW1B,IAElCuB,KAIPJ,GAEIV,EAAKT,EAAQ,IACbE,EAASS,QAAQF,EAAI,GAAGE,QAAQgB,QAChCzB,EAASS,QAAQF,EAAI,GAAGE,QAAQiB,UAS0GC,CAASpB,EAAGS,EAAEY,OAAOd,eAM/KrB,EAAUoC,aAAe,CACrB/B,MAAO,EACPwB,cAAe,aACfT,QAAS,SAGEpB,Q,iHChDR,IAAMqC,EAAgBzC,IAAOC,IAAV,KCuBXyC,MApBf,WAEI,IAAMC,EAAoB,SAAAC,GACtBC,QAAQC,IAAR,gBAAqBF,EAAKnB,MAA1B,YAAmCmB,EAAKV,MAAQ,QAAU,aAG9D,OACI,kBAACO,EAAD,KACI,6BACI,mDACA,kBAAC,EAAD,CAAWR,cAAeU,KAE9B,6BACI,wEACA,kBAAC,EAAD,CAAWlC,MAAO,EAAGe,QAAS,WAAYS,cAAeU,OCdzEI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.1b4e7c2c.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    padding: 10px;\r\n    border: 1px solid #bbb;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    border: 1px solid #000;\r\n    padding: 10px;\r\n    background: #fff;\r\n    border-radius: 5px;\r\n    font-size: 3rem;\r\n    display: inline-block;\r\n    text-align: center;\r\n    width: 80px;\r\n    height: 80px;\r\n`;\r\n","import React, { useState, useRef, createRef } from \"react\";\r\n\r\nimport { Container, Input } from './styles';\r\n\r\nconst CodeInput = (props) => {\r\n    const [values, setValues] = useState([]);\r\n    const slots = parseInt(props.slots, 10) > 0 ? parseInt(props.slots, 10) : 1;\r\n\r\n    const slotRefs = useRef(Array(slots).fill(0).map(slot => createRef()));\r\n\r\n    const setValue = (i, value) => {\r\n        // limpio el valor basado en la regex\r\n        const cleanValue = (value.match(props.pattern) || []).join('');\r\n        \r\n        setValues((prev) => {\r\n            const newValues = [...prev];\r\n            newValues[i] = cleanValue;\r\n            props.onValueChange({\r\n                value: newValues.join(''),\r\n                valid: newValues.join('').length === slots\r\n            });\r\n            return newValues;\r\n        });\r\n\r\n        // si el valor es valido y no vacio\r\n        if (cleanValue) {\r\n            // si no estoy en el ultimo avanzo al proximo\r\n            if (i < (slots - 1)) {\r\n                slotRefs.current[i + 1].current.focus();\r\n                slotRefs.current[i + 1].current.select();\r\n            }\r\n        }\r\n        \r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            {Array(slots).fill(0).map((slot, i) => (\r\n                <Input ref={slotRefs.current[i]} type=\"text\" step=\"1\" maxLength={1} pattern={`${props.pattern}`} value={values[i] || \"\"} onChange={(e) => setValue(i, e.target.value)} />\r\n            ))}\r\n        </Container>\r\n    );\r\n};\r\n\r\nCodeInput.defaultProps = {\r\n    slots: 4,\r\n    onValueChange: () => { },\r\n    pattern: \"[0-9]\"\r\n};\r\n\r\nexport default CodeInput;\r\n","import styled from 'styled-components';\r\n\r\nexport const MainContainer = styled.div`\r\n    max-width: 50%;\r\n    margin: 0 auto;\r\n`;","import React from 'react';\n\nimport CodeInput from './components/CodeInput/';\nimport { MainContainer } from './styles';\n\nfunction App() {\n\n    const handleValueChange = code => {\n        console.log(`code: ${code.value} ${code.valid ? 'valid' : 'invalid'}`)\n    }\n\n    return (\n        <MainContainer>\n            <div>\n                <h2>Default (4 numeros)</h2>\n                <CodeInput onValueChange={handleValueChange} />\n            </div>\n            <div>\n                <h2>Custom props: 6 valores alfanum√©ricos</h2>\n                <CodeInput slots={6} pattern={'[a-z0-9]'} onValueChange={handleValueChange} />\n            </div>\n        </MainContainer>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}